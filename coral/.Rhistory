summary(cvsvc)
set.seed(126)
cvsvc <- tune(svm,mpglevel~.-mpg,data = Auto, kernel = "linear",ranges = list(cost=c(0.01,0.1,1,10,100,1000)))
summary(cvsvc)
set.seed(126)
cvsvc <- tune(svm,mpglevel~.-mpg,data = Auto, kernel = "polynomial",ranges = list(cost=c(0.01,0.1,1,10,100,1000),degree=c(2,3,4,5),gamma=c(0.5,1,2,3,4)))
summary(cvsvc)
set.seed(126)
cvsvc <- tune(svm,mpglevel~.-mpg,data = Auto, kernel = "polynomial",ranges = list(cost=c(0.01,0.1,1,10,100),degree=c(2,3,4),gamma=c(0.5,1,2,3)))
summary(cvsvc)
set.seed(126)
cvsvc <- tune(svm,mpglevel~.-mpg,data = Auto, kernel = "polynomial",ranges = list(cost=c(0.01,0.1,1,10,100),degree=c(2,3,4),gamma=c(0.5,1,2)))
summary(cvsvc)
cvsvc_poly <- tune(svm,mpglevel~.-mpg,data = Auto, kernel = "polynomial",ranges = list(cost=c(0.01,0.1,1,10,100),degree=c(2,3,4)))
summary(cvsvc_poly)
cvsvc_rad <- tune(svm,mpglevel~.-mpg,data = Auto, kernel = "radial",ranges = list(cost=c(0.01,0.1,1,10,100),gamma=c(0.5,1,2)))
summary(cvsvc_rad)
set.seed(126)
cvsvc_poly <- tune(svm,mpglevel~.-mpg,data = Auto, kernel = "polynomial",ranges = list(cost=c(0.01,0.1,1,10,100),degree=c(2,3,4)))
summary(cvsvc_poly)
cvsvc_rad <- tune(svm,mpglevel~.-mpg,data = Auto, kernel = "radial",ranges = list(cost=c(0.01,0.1,1,10,100),gamma=c(0.5,1,2)))
summary(cvsvc_rad)
set.seed(126)
cvsvc_poly <- tune(svm,mpglevel~.-mpg,data = Auto, kernel = "polynomial",ranges = list(cost=c(0.01,0.1,1,10,100),degree=c(2,3,4)))
summary(cvsvc_poly)
cvsvc_rad <- tune(svm,mpglevel~.-mpg,data = Auto, kernel = "radial",ranges = list(cost=c(0.01,0.1,1,10,100),gamma=c(0.5,1,2)))
summary(cvsvc_rad)
svml <- svm(mpglevel~.-mpg, data = Auto, kernel="linear",cost=0.01)
svmp <- svm(mpglevel~.-mpg, data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~.-mpg, data = Auto, kernel="radial",cost=1,gamma=1)
plot(svml)
plot(svml,data=Auto)
svml <- svm(mpglevel~.-mpg, data = Auto, kernel="linear",cost=0.01)
svmp <- svm(mpglevel~.-mpg, data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~.-mpg, data = Auto, kernel="radial",cost=1,gamma=1)
plot(svml,data=Auto)
svml <- svm(mpglevel~.-mpg, data = Auto, kernel="linear",cost=0.01)
svmp <- svm(mpglevel~.-mpg, data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~.-mpg, data = Auto, kernel="radial",cost=1,gamma=1)
plot(svml,data=Auto)
plot(svml,data=Auto,as.formula(paste("mpg~", name, sep = "")))
plot(svml,data=Auto,mpg~cylinders+displacement+horsepower+weight+acceleration+year+origin)
svml <- svm(mpglevel~.-mpg, data = Auto, kernel="linear",cost=0.01)
svmp <- svm(mpglevel~.-mpg, data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~.-mpg, data = Auto, kernel="radial",cost=1,gamma=1)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotpairs(svml)
svml <- svm(mpglevel~., data = Auto, kernel="linear",cost=0.01)
svmp <- svm(mpglevel~.-mpg, data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~.-mpg, data = Auto, kernel="radial",cost=1,gamma=1)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotpairs(svml)
svml <- svm(mpglevel~., data = Auto, kernel="linear",cost=0.01)
svmp <- svm(mpglevel~.-mpg, data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~.-mpg, data = Auto, kernel="radial",cost=1,gamma=1)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
par(mfrow=c(2,4))
plotpairs(svml)
svml <- svm(mpglevel~., data = Auto, kernel="linear",cost=0.01)
svmp <- svm(mpglevel~.-mpg, data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~.-mpg, data = Auto, kernel="radial",cost=1,gamma=1)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
par(mfrow=c(4,2))
plotpairs(svml)
svml <- svm(mpglevel~., data = Auto, kernel="linear",cost=0.01)
svmp <- svm(mpglevel~.-mpg, data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~.-mpg, data = Auto, kernel="radial",cost=1,gamma=1)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
par(mfrow=c(3,3))
plotpairs(svml)
svml <- svm(mpglevel~., data = Auto, kernel="linear",cost=0.01)
svmp <- svm(mpglevel~.-mpg, data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~.-mpg, data = Auto, kernel="radial",cost=1,gamma=1)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotpairs(svml)
svml <- svm(mpglevel~.-mpg, data = Auto, kernel="linear",cost=0.01)
svmp <- svm(mpglevel~.-mpg, data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~.-mpg, data = Auto, kernel="radial",cost=1,gamma=1)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
plot(fit, Auto, as.formula(paste("mpglevel~", name, sep = "")))
}
}
plotpairs(svml)
svml <- svm(mpglevel~.-mpg, data = Auto, kernel="linear",cost=0.01)
svmp <- svm(mpglevel~.-mpg, data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~.-mpg, data = Auto, kernel="radial",cost=1,gamma=1)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotpairs(svml)
set.seed(126)
cvsvc <- tune(svm,mpglevel~.,data = Auto, kernel = "linear",ranges = list(cost=c(0.01,0.1,1,10,100,1000)))
summary(cvsvc)
set.seed(126)
cvsvc_poly <- tune(svm,mpglevel~.,data = Auto, kernel = "polynomial",ranges = list(cost=c(0.01,0.1,1,10,100),degree=c(2,3,4)))
summary(cvsvc_poly)
set.seed(126)
cvsvc_rad <- tune(svm,mpglevel~.,data = Auto, kernel = "radial",ranges = list(cost=c(0.01,0.1,1,10,100),gamma=c(0.5,1,2)))
summary(cvsvc_rad)
svml <- svm(mpglevel~., data = Auto, kernel="linear",cost=1)
svmp <- svm(mpglevel~., data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~., data = Auto, kernel="radial",cost=10,gamma=.5)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotpairs(svml)
plotpairs(svmp)
plotpairs(svmr)
svml <- svm(mpglevel~., data = Auto, kernel="linear",cost=1)
svmp <- svm(mpglevel~., data = Auto, kernel="polynomial",cost=100,degree=2)
svmr <- svm(mpglevel~., data = Auto, kernel="radial",cost=10,gamma=.5)
plotpairs = function(fit) {
for (name in names(Auto)[!(names(Auto) %in% c("mpg", "mpglevel", "name"))]) {
plot(fit, Auto, as.formula(paste("mpg~", name, sep = "")))
}
}
plotpairs(svml)
set.seed(126)
train <- sample(nrow(OJ), 800)
OJ.train <- OJ[train, ]
OJ.test <- OJ[-train, ]
svml <- svm(Purchase ~ ., data = OJ.train, kernel = "linear", cost = 0.01)
summary(svml)
ojtrain <- OJ[train, ]
ojtest <- OJ[-train, ]
set.seed(126)
train <- sample(nrow(OJ), 800)
ojtrain <- OJ[train, ]
ojtest <- OJ[-train, ]
pred <- predict(svml,data=ojtest)
table(ojtest$Purchase,pred)
pred <- predict(svml,data=ojtest)
table(ojtest$Purchase,pred)
svml <- svm(Purchase ~ ., data = ojtrain, kernel = "linear", cost = 0.01)
summary(svml)
pred <- predict(svml,data=ojtest)
table(ojtest$Purchase,pred)
pred <- predict(svml,data=ojtest)
table(ojtest$Purchase,pred)
pred <- predict(svml,ojtest)
table(ojtest$Purchase,pred)
pred <- predict(svml,ojtrain)
table(ojtrain$Purchase,pred)
pred <- predict(svml,ojtrain)
table(ojtrain$Purchase,pred)
pred <- predict(svml,ojtest)
table(ojtest$Purchase,pred)
(80+54)/(435+54+80+231)
pred <- predict(svml,ojtrain)
table(ojtrain$Purchase,pred)
(80+54)/(435+54+80+231)
pred <- predict(svml,ojtest)
table(ojtest$Purchase,pred)
(27+18)/(146+18+27+79)
pred <- predict(svml,ojtrain)
table(ojtrain$Purchase,pred)
(80+54)/(435+54+80+231)
pred <- predict(svml,ojtest)
table(ojtest$Purchase,pred)
(27+18)/(146+18+27+79)
tunel <- tune(Purchase ~ ., data = ojtrain, kernel = "linear", ranges = list(cost=10^seq(-2,1,by=0.5)))
tunel <- tune(svm,Purchase ~ ., data = ojtrain, kernel = "linear", ranges = list(cost=10^seq(-2,1,by=0.5)))
tunel <- tune(svm,Purchase ~ ., data = ojtrain, kernel = "linear", ranges = list(cost=10^seq(-2,1,by=0.5)))
summary(tunel)
set.seed(126)
tunel <- tune(svm,Purchase ~ ., data = ojtrain, kernel = "linear", ranges = list(cost=10^seq(-2,1,by=0.5)))
summary(tunel)
svml <- svm(Purchase ~ ., data = ojtrain, kernel = "linear", cost = 0.0316)
pred <- predict(svml,ojtrain)
table(ojtrain$Purchase,pred)
(80+54)/(435+54+80+231)
pred <- predict(svml,ojtest)
table(ojtest$Purchase,pred)
(27+18)/(146+18+27+79)
svml <- svm(Purchase ~ ., data = ojtrain, kernel = "linear", cost = 0.0316)
pred <- predict(svml,ojtrain)
table(ojtrain$Purchase,pred)
(75+54)/(435+54+75+236)
pred <- predict(svml,ojtest)
table(ojtest$Purchase,pred)
(27+20)/(144+20+27+79)
set.seed(126)
tunel <- tune(svm,Purchase ~ ., data = ojtrain, kernel = "linear", ranges = list(cost=10^seq(-2,1,by=0.5)))
summary(tunel)
svmr<- svm(Purchase ~ ., kernel = "radial", data = ojtrain)
summary(svmr)
svmr<- svm(Purchase ~ ., kernel = "radial", data = ojtrain)
summary(svmr)
pred <- predict(svmr,ojtrain)
table(ojtrain$Purchase,pred)
(80+54)/(435+54+80+231)
pred <- predict(svmr,ojtest)
table(ojtest$Purchase,pred)
(27+18)/(146+18+27+79)
set.seed(126)
tuner <- tune(svm,Purchase ~ ., data = ojtrain, kernel = "radial", ranges = list(cost=10^seq(-2,1,by=0.5)))
summary(tuner)
svmr <- svm(Purchase ~ ., data = ojtrain, kernel = "radial", cost = 0.0316)
pred <- predict(svmr,ojtrain)
table(ojtrain$Purchase,pred)
(80+54)/(435+54+80+231)
pred <- predict(svmr,ojtest)
table(ojtest$Purchase,pred)
(27+18)/(146+18+27+79)
435+54+80+231
146+18+27+79
svmr<- svm(Purchase ~ ., kernel = "radial", data = ojtrain)
summary(svmr)
pred <- predict(svmr,ojtrain)
table(ojtrain$Purchase,pred)
(76+40)/800
pred <- predict(svmr,ojtest)
table(ojtest$Purchase,pred)
(28+17)/270
set.seed(126)
tuner <- tune(svm,Purchase ~ ., data = ojtrain, kernel = "radial", ranges = list(cost=10^seq(-2,1,by=0.5)))
summary(tuner)
svmr <- svm(Purchase ~ ., data = ojtrain, kernel = "radial", cost = 1)
pred <- predict(svmr,ojtrain)
table(ojtrain$Purchase,pred)
(80+54)/800
pred <- predict(svmr,ojtest)
table(ojtest$Purchase,pred)
(27+18)/270
(76+40)/800
(28+17)/270
svmr<- svm(Purchase ~ ., kernel = "radial", data = ojtrain)
summary(svmr)
pred <- predict(svmr,ojtrain)
table(ojtrain$Purchase,pred)
(76+40)/800
pred <- predict(svmr,ojtest)
table(ojtest$Purchase,pred)
(28+17)/270
svmr <- svm(Purchase ~ ., data = ojtrain, kernel = "radial", cost = 1)
pred <- predict(svmr,ojtrain)
table(ojtrain$Purchase,pred)
(76+40)/800
pred <- predict(svmr,ojtest)
table(ojtest$Purchase,pred)
(28+17)/270
quadsvm <- svm(y~x1+x2,nonlinear,kernel="radial")
pred <- predict(quadsvm,nonlinear)
plot(x1,x2,col=pred)
svmp<- svm(Purchase ~ ., kernel = "polynomial", data = ojtrain,degree=2)
summary(svmp)
pred <- predict(svmp,ojtrain)
table(ojtrain$Purchase,pred)
(76+40)/800
pred <- predict(svmp,ojtest)
table(ojtest$Purchase,pred)
(28+17)/270
pred <- predict(svmp,ojtrain)
table(ojtrain$Purchase,pred)
(116+32)/800
pred <- predict(svmp,ojtest)
table(ojtest$Purchase,pred)
(34+16)/270
set.seed(126)
tuner <- tune(svm,Purchase ~ ., data = ojtrain, kernel = "polynomial",degree=2, ranges = list(cost=10^seq(-2,1,by=0.5)))
summary(tuner)
svmp <- svm(Purchase ~ ., data = ojtrain, kernel = "polynomial", cost = 10,degree=2)
pred <- predict(svmp,ojtrain)
table(ojtrain$Purchase,pred)
(76+40)/800
pred <- predict(svmp,ojtest)
table(ojtest$Purchase,pred)
(28+17)/270
svmp <- svm(Purchase ~ ., data = ojtrain, kernel = "polynomial", cost = 10,degree=2)
pred <- predict(svmp,ojtrain)
table(ojtrain$Purchase,pred)
(83+40)/800
pred <- predict(svmp,ojtest)
table(ojtest$Purchase,pred)
(28+18)/270
setwd("E:/Study/MSSP/Spring 2017/676/Coral_Data_CSV_Files")
setwd("E:/Study/MSSP/Spring 2017/676/Coral_Data_CSV_Files")
growth<-read.csv("Growth_Change.csv")
deltaheight<-growth$Height_16-growth$Height_15
deltaheight[deltaheight>0]<-1
deltaheight[deltaheight<=0]<-0
deltavolume<-growth$Volume_16-growth$Volume_15
deltavolume[deltavolume>0]<-1
deltavolume[deltavolume<=0]<-0
tips<-read.csv("Tip_Change.csv")
deltatip<-tips$Tip_2016-tips$Tip_2015
deltatip[deltatip>0]<-1
deltatip[deltatip<=0]<-0
plot(growth$L_C~growth$Length_15)
library(ggplot2)
ggplot(growth,aes(x=Height_15,y=H_C)) + geom_point() + geom_smooth(method ="lm") + ggtitle("2015 Height vs. Height difference")
ggplot(growth,aes(x=Volume_15,y=EV_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Volume vs. Volume difference")
ggplot(tips[-which.max(tips$Tip_2015),],aes(x=Tip_2015,y=T_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Tip vs. Tip difference")
ggplot(growth,aes(x=Height_15,y=H_C)) + geom_point() + geom_smooth(method ="lm") + ggtitle("2015 Height vs. Height difference") +
xlab("Height in 2015") + ylab("Difference of Height")
ggplot(growth,aes(x=Volume_15,y=EV_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Volume vs. Volume difference")+
xlab("Volume in 2015") + ylab("Difference of Volume")
ggplot(tips[-which.max(tips$Tip_2015),],aes(x=Tip_2015,y=T_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Tip vs. Tip difference")+
xlab("Tips in 2015") + ylab("Difference of Tips")
ggplot(tips,aes(x=Tip_2015,y=T_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Tip vs. Tip difference")+
xlab("Tips in 2015") + ylab("Difference of Tips")
library(gridExtra)
grid.arrange(a,b,c,nrow=1)
a <- ggplot(growth,aes(x=Height_15,y=H_C)) + geom_point() + geom_smooth(method ="lm") + ggtitle("2015 Height vs. Height difference") +
xlab("Height in 2015") + ylab("Difference of Height")
b <- ggplot(growth,aes(x=Volume_15,y=EV_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Volume vs. Volume difference")+
xlab("Volume in 2015") + ylab("Difference of Volume")
c<-ggplot(tips,aes(x=Tip_2015,y=T_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Tip vs. Tip difference")+
xlab("Tips in 2015") + ylab("Difference of Tips")
library(gridExtra)
grid.arrange(a,b,c,nrow=1)
b <- ggplot(growth,aes(x=log(Volume_15),y=EV_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Volume vs. Volume difference")+
xlab("log Volume in 2015") + ylab("Difference of Volume")
c<-ggplot(tips,aes(x=log(Tip_2015),y=T_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Tip vs. Tip difference")+
xlab("log Tips in 2015") + ylab("Difference of Tips")
library(gridExtra)
grid.arrange(b,c,nrow=1)
b <- ggplot(growth,aes(x=log(Volume_15+1),y=EV_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Volume vs. Volume difference")+
xlab("log Volume in 2015") + ylab("Difference of Volume")
c<-ggplot(tips,aes(x=log(Tip_2015+1),y=T_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Tip vs. Tip difference")+
xlab("log Tips in 2015") + ylab("Difference of Tips")
grid.arrange(b,c,nrow=1)
model_h1<-glm(deltaheight~growth$Height_15,family = binomial)
summary(model_h1)
exp(-0.09596)
model_v2<-glm(deltavolume~log(growth$Volume_15),family = binomial)
summary(model_v2)
model_t2<-glm(deltatip~log(tips$Tip_2015),family = binomial)
summary(model_t2)
setwd("E:/Study/MSSP/Spring 2017/676/Coral_Data_CSV_Files")
growth<-read.csv("Growth_Change.csv")
deltaheight<-growth$Height_16-growth$Height_15
deltaheight[deltaheight>0]<-1
deltaheight[deltaheight<=0]<-0
deltavolume<-growth$Volume_16-growth$Volume_15
deltavolume[deltavolume>0]<-1
deltavolume[deltavolume<=0]<-0
tips<-read.csv("Tip_Change.csv")
deltatip<-tips$Tip_2016-tips$Tip_2015
deltatip[deltatip>0]<-1
deltatip[deltatip<=0]<-0
plot(growth$L_C~growth$Length_15)
library(ggplot2)
a <- ggplot(growth,aes(x=Height_15,y=H_C)) + geom_point() + geom_smooth(method ="lm") + ggtitle("2015 Height vs. Height difference") +
xlab("Height in 2015") + ylab("Difference of Height")
b <- ggplot(growth,aes(x=log(Volume_15+1),y=EV_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Volume vs. Volume difference")+
xlab("log Volume in 2015") + ylab("Difference of Volume")
c<-ggplot(tips,aes(x=log(Tip_2015+1),y=T_C)) + geom_point() + geom_smooth(method ="lm")+ ggtitle("2015 Tip vs. Tip difference")+
xlab("log Tips in 2015") + ylab("Difference of Tips")
library(gridExtra)
grid.arrange(b,c,nrow=1)
##linear
#height
model_h <- lm(H_C~Height_15,data = growth)
summary(model_h)
influenceIndexPlot(model_h, id.n=3,vars="hat",main = "hat-values plot of height")
#height
model_v <- lm(EV_C~log(Volume_15),data = growth)
summary(model_v)
influenceIndexPlot(model_v, id.n=3,vars="hat",main = "hat-values plot of volume")
#height
model_t <- lm(T_C~Tip_2015,data = tips[-which.max(tips$Tip_2015),])
summary(model_t)
influenceIndexPlot(model_t, id.n=3,vars="hat",main = "hat-values plot of tip")
#logestic regression
#without transformation
#height
model_h1<-glm(deltaheight~growth$Height_15,family = binomial)
summary(model_h1)
#significant
#volume
model_v1<-glm(deltavolume~growth$Volume_15,family = binomial)
summary(model_v1)
#tips
model_t1<-glm(deltatip~tips$Tip_2015,family = binomial)
summary(model_t1)
#with log transformation
model_h2<-glm(deltaheight~log(growth$Height_15),family = binomial)
summary(model_h2)
model_v2<-glm(deltavolume~log(growth$Volume_15),family = binomial)
summary(model_v2)
#significant
model_t2<-glm(deltatip~log(tips$Tip_2015),family = binomial)
summary(model_t2)
#multinomial regression
library(nnet)
deltaheight[deltaheight>0]<-1
deltaheight[deltaheight=0]<-0
deltaheight[deltaheight<0]<--1
regout = multinom(deltaheight ~ growth$Height_15)
summary(regout)
deltavolume[deltavolume>0]<-1
deltavolume[deltavolume=0]<-0
deltavolume[deltavolume<0]<--1
regout = multinom(deltavolume ~ log(growth$Volume_15))
summary(regout)
deltatip[deltatip>0]<-1
deltatip[deltatip=0]<-0
deltatip[deltatip<0]<--1
regout = multinom(deltatip ~ tips$Tip_2015)
summary(regout)
#log transformation
model_h3<-multinom(deltaheight~growth$Height_15)
summary(model_h3)
model_v3<-glm(deltavolume~log(growth$Volume_15),family = binomial)
summary(model_v3)
model_t3<-glm(deltatip~tips$Tip_2015,family = binomial)
summary(model_t3)
**************************************
the model for height with original value has significant coefficients
the model for volume with log value has significant coefficients
only volume could be log transformed
model_t2<-glm(deltatip~log(tips$Tip_2015),family = binomial)
summary(model_t2)
model_t2<-glm(deltatip~log(tips$Tip_2015+1),family = binomial)
summary(model_t2)
exp(-266)
model_h <- lm(H_C~Height_15,data = growth[deltaheight==1,])
summary(model_h)
influenceIndexPlot(model_h, id.n=3,vars="hat",main = "hat-values plot of height")
library(ggplot2)
influenceIndexPlot(model_h, id.n=3,vars="hat",main = "hat-values plot of height")
library(car)
influenceIndexPlot(model_h, id.n=3,vars="hat",main = "hat-values plot of height")
model_h <- lm(H_C~Height_15,data = growth[deltaheight==0,])
summary(model_h)
influenceIndexPlot(model_h, id.n=3,vars="hat",main = "hat-values plot of height")
residualPlot(model_h)
plot(model_h)
model_v <- lm(EV_C~log(Volume_15),data = growth[deltaheight==1,])
summary(model_v)
influenceIndexPlot(model_v, id.n=3,vars="hat",main = "hat-values plot of volume")
plot(model_v)
model_h1<-glm(deltaheight~growth$Height_15,family = binomial)
summary(model_h1)
model_v2<-glm(deltavolume~log(growth$Volume_15),family = binomial)
summary(model_v2)
model_t2<-glm(deltatip~log(tips$Tip_2015),family = binomial)
summary(model_t2)
model_h <- lm(H_C~Height_15,data = growth[deltaheight==0,])
model_v <- lm(EV_C~log(Volume_15),data = growth[deltaheight==0,])
model_t <- lm(T_C~log(Tip_2015+1),data = tips[deltaheight==0,])
model_h1 <- lm(H_C~Height_15,data = growth[deltaheight==1,])
model_v1 <- lm(EV_C~log(Volume_15),data = growth[deltaheight==1,])
model_t1 <- lm(T_C~log(Tip_2015),data = tips[deltaheight==1,])
model_t1 <- lm(T_C~log(Tip_2015+1),data = tips[deltaheight==1,])
par(mfrow=c(2,3))
plot(model_h)[4]
plot(model_v)[4]
plot(model_t)[4]
plot(model_h1)[4]
plot(model_v1)[4]
plot(model_t1)[4]
model_h1<-glm(deltaheight~growth$Height_15,family = binomial)
plot(model_h)[4]
plot(model_h)[4,]
leveragePlots(model_h)
leveragePlots(model_h)
par(mfrow=c(2,3))
plot(model_h,which=4)
plot(model_v,which=4)
plot(model_t,which=4)
plot(model_h1,which=4)
plot(model_v1,which=4)
plot(model_t1,which=4)
plot(model_h,which=5)
plot(model_v,which=5)
plot(model_t,which=5)
plot(model_h1,which=5)
plot(model_v1,which=5)
plot(model_t1,which=5)
plot(model_h,which=1)
plot(model_v,which=1)
plot(model_t,which=1)
plot(model_h1,which=1)
plot(model_v1,which=1)
plot(model_t1,which=1)
plot(model_h,which=4)
plot(model_t,which=4)
plot(model_v,which=4)
plot(model_v1,which=4)
plot(model_h1,which=4)
plot(model_t1,which=4)
